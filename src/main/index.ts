import { app, BrowserWindow, ipcMain } from 'electron'; // Uncomment ipcMain
import path from 'path'; // Uncomment path
import RecordingService from './services/RecordingService';
import { protocol } from 'electron';
import { ImageService } from './services/ImageService';
import ProjectService from './services/ProjectService';
import { IpcChannels } from '../shared/constants';

// This allows TypeScript to pick up the magic constants that are auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string; // Use the correct preload entry constant

let mainWindow: BrowserWindow | null = null;
let recordingServiceInstance: RecordingService | null = null;
let projectServiceInstance: ProjectService | null = null;

// Register protocol handler for loading local files
function registerProtocolHandler() {
  protocol.registerFileProtocol('local-file', (request, callback) => {
    const url = request.url.replace('local-file://', '');
    try {
      const decodedUrl = decodeURIComponent(url);
      callback({ path: decodedUrl });
    } catch (error) {
      console.error('Failed to register protocol', error);
    }
  });
}

function createWindow() {
  // Log the preload path before creating the window
  console.log('MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY:', MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY);

  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      // Use the correct Webpack entry for the preload script
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webSecurity: false, // Disable web security to allow loading local files
      spellcheck: false, // Disable spellcheck which can interfere with input fields
      enableWebSQL: true // Enable WebSQL for better compatibility
    }
  });

  // Set Content Security Policy
  mainWindow.webContents.session.webRequest.onHeadersReceived((details, callback) => {
    // Temporarily allow unsafe-eval for Webpack dev server compatibility
    // TODO: Refine CSP for production builds
    const scriptSrc = "'self' 'unsafe-inline' 'unsafe-eval'"; // Keep unsafe-eval for dev HMR

    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [`default-src 'self'; script-src ${scriptSrc}; style-src 'self' 'unsafe-inline'; img-src 'self' file: data: blob: filesystem:; connect-src 'self' ws: file:; media-src 'self' file:;`]
      }
    });
  });

  // Load the index.html of the app using the correct Webpack entry URL.
  console.log('Loading Webpack entry:', MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY).catch(err => {
    console.error('Failed to load window:', err);
  });

  if (process.env.NODE_ENV === 'development') {
    mainWindow.webContents.openDevTools();
    // Wait for window to be ready before showing
    mainWindow.once('ready-to-show', () => {
      // Add null check before showing
      if (mainWindow) {
        mainWindow.show();
      }
    });
  }

  // Instantiate RecordingService *after* mainWindow is created
  // and pass the non-null mainWindow instance
  recordingServiceInstance = new RecordingService(mainWindow);
  // Initialize ProjectService
  projectServiceInstance = ProjectService.getInstance();
  
  // Call registerShortcuts here if needed on window creation
  // recordingServiceInstance.registerShortcuts(); 

  mainWindow.on('closed', () => {
    mainWindow = null;
    // Optionally nullify recordingServiceInstance too if needed
  });
}

function registerIpcHandlers() {
  // Register image loading handler
  ipcMain.handle('load-image-as-data-url', async (_event, imagePath) => {
    console.log(`Attempting to load image as data URL: ${imagePath}`);
    return await ImageService.imagePathToDataUrl(imagePath);
  });

  // Register existing step management handlers
  ipcMain.handle(IpcChannels.GET_STEPS, async () => {
    return recordingServiceInstance?.getSteps() || [];
  });
  
  ipcMain.on(IpcChannels.ADD_STEP, (_event, step) => {
    recordingServiceInstance?.addStep(step);
  });
  
  // Project handlers are registered inside ProjectService
}

app.whenReady().then(() => {
  registerProtocolHandler(); // Register custom protocol handler
  
  // Initialize services first
  if (!projectServiceInstance) {
    projectServiceInstance = ProjectService.getInstance();
  }
  
  // Create window (which initializes recording service)
  createWindow();
  
  // Register IPC handlers
  registerIpcHandlers();

  // Ensure cleanup on quit
  app.on('will-quit', () => {
    recordingServiceInstance?.cleanup(); // Call the cleanup method
  });
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (mainWindow === null) {
    createWindow();
  }
});

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// eslint-disable-next-line @typescript-eslint/no-var-requires
if (require('electron-squirrel-startup')) {
  // ... rest of file ...
} 