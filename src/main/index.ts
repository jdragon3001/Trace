import { app, BrowserWindow/*, ipcMain*/ } from 'electron'; // Comment out unused ipcMain
import path from 'path'; // Uncomment path
import RecordingService from './services/RecordingService';

// This allows TypeScript to pick up the magic constants that are auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string; // Use the correct preload entry constant

let mainWindow: BrowserWindow | null = null;
let recordingServiceInstance: RecordingService | null = null;

function createWindow() {
  // Log the preload path before creating the window
  console.log('MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY:', MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY);

  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      // Use the correct Webpack entry for the preload script
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webSecurity: true
    }
  });

  // Set Content Security Policy
  mainWindow.webContents.session.webRequest.onHeadersReceived((details, callback) => {
    // Temporarily allow unsafe-eval for Webpack dev server compatibility
    // TODO: Refine CSP for production builds
    const scriptSrc = "'self' 'unsafe-inline' 'unsafe-eval'"; // Keep unsafe-eval for dev HMR

    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [`default-src 'self'; script-src ${scriptSrc}; style-src 'self' 'unsafe-inline'; img-src 'self' file: data:; connect-src 'self' ws:`]
      }
    });
  });

  // Load the index.html of the app using the correct Webpack entry URL.
  console.log('Loading Webpack entry:', MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY).catch(err => {
    console.error('Failed to load window:', err);
  });

  if (process.env.NODE_ENV === 'development') {
    mainWindow.webContents.openDevTools();
    // Wait for window to be ready before showing
    mainWindow.once('ready-to-show', () => {
      // Add null check before showing
      if (mainWindow) {
        mainWindow.show();
      }
    });
  }

  // Instantiate RecordingService *after* mainWindow is created
  // and pass the non-null mainWindow instance
  recordingServiceInstance = new RecordingService(mainWindow);
  // Call registerShortcuts here if needed on window creation
  // recordingServiceInstance.registerShortcuts(); 

  mainWindow.on('closed', () => {
    mainWindow = null;
    // Optionally nullify recordingServiceInstance too if needed
  });
}

app.whenReady().then(() => {
  createWindow(); // This now also creates the recording service

  // Ensure cleanup on quit
  app.on('will-quit', () => {
    recordingServiceInstance?.cleanup(); // Call the cleanup method
  });
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (mainWindow === null) {
    createWindow();
  }
});

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// eslint-disable-next-line @typescript-eslint/no-var-requires
if (require('electron-squirrel-startup')) {
  // ... rest of file ...
} 